%Last updated zzz
%sodium doublet at 5889.950 and 5895.924
%D1 redder 5895.924 and D2 bluer and typically stronger 5889.950
%1994ApJ...422..158O used for 3.1 citation


function [] = measureNaID(wavelength,flux,A_V,offsetfactorforMW,name,instrument,reldate,varargin)

%%%optional arguments
%default values for optional arguments
options = struct('dataID',[]);
%read the acceptable names
optionNames = fieldnames(options);
noptArgs = length(varargin);
%count arguments
if(round(noptArgs/2)~=noptArgs/2)
   error('estimate_cont_halpha needs propertyName/propertyValue pairs for optional arguments')
end
if(~isempty(varargin))
	for pair = reshape(varargin,2,[]) %pair is {paramName;paramValue}
	   inpName = pair{1};
	   if(any(strcmp(inpName,optionNames)))
		  %overwrite the optional arguments
		  options.(inpName) = pair{2};
	   else
		  error('%s is not a recognized parameter name',inpName)
	   end
	end
end

%locations
figuredirectory = 'c:\Users\Cbilinski\Desktop\Figures\NaID\';
dataoutputdirectory = 'C:\Users\Cbilinski\Dropbox\Astrophysics\Projects\GradSchool\TypeIInsSNSPOL\data\';

%initialize constants
run_parameters = 0;
accept_fit = 0;

%%%check for wave locations used in previous run which are stored in a parameter file
%remove blanks from options.dataID
options.dataID(options.dataID == ' ') = [];
if(~isempty(options.dataID))
	%% Import data from text file
	% Script for importing data from the following text file:
	%
	%    filename: C:\Users\Cbilinski\Dropbox\Astrophysics\Projects\GradSchool\TypeIInsSNSPOL\data\parameters_measure_NaID.txt
	%
	% Auto-generated by MATLAB on 26-May-2021 14:27:04

	%% Set up the Import Options and import the data
	opts = delimitedTextImportOptions("NumVariables", 9);

	% Specify range and delimiter
	opts.DataLines = [2, Inf];
	opts.Delimiter = " ";

	% Specify column names and types
	opts.VariableNames = ["dataID", "wav_gin1", "wav_gin2", "wav_gin3", "wav_gin4", "wav_gin5", "wav_gin6", "wav_gin7", "wav_gin8"];
	opts.VariableTypes = ["string", "double", "double", "double", "double", "double", "double", "double", "double"];

	% Specify file level properties
	opts.ExtraColumnsRule = "ignore";
	opts.EmptyLineRule = "read";
	opts.ConsecutiveDelimitersRule = "join";
	opts.LeadingDelimitersRule = "ignore";

	% Specify variable properties
	opts = setvaropts(opts, "dataID", "WhitespaceRule", "preserve");
	opts = setvaropts(opts, "dataID", "EmptyFieldRule", "auto");

	% Import the data
	params = readtable("C:\Users\Cbilinski\Dropbox\Astrophysics\Projects\GradSchool\TypeIInsSNSPOL\data\parameters_measure_NaID.txt", opts);

	%% Clear temporary variables
	clear opts

	for i=1:size(params,1)
		if(strcmp(options.dataID,params.dataID(i)))
			%assign stored values
			wav_gin = [params.wav_gin1(i) params.wav_gin2(i) params.wav_gin3(i) params.wav_gin4(i) params.wav_gin5(i) params.wav_gin6(i) params.wav_gin7(i) params.wav_gin8(i)]';
			run_parameters = 1;
		end	
	end
end

%initialize long format
format long

if(size(wavelength,2)>1)
	wavelength = wavelength';
end
if(size(flux,2)>1)
	flux = flux';
end

while(accept_fit == 0)
	%if no parameters were read in, find them interactively
	if(run_parameters==0)

	%show NaID lines so that you mark the left continuum left and right, right continuum left and right, first line left and right, second line left and right
		plottest = figure(1);
		set(gcf,'color','w');
		set(plottest,'units','normalized','outerposition',[0 0 1 1]);
		set(plottest,'PaperUnits','normalized','PaperPosition',[0 0 3 1]);
		set(gcf,'renderer','painters')
		colormap jet
		clf
		plot(wavelength(wavelength>5493 & wavelength<6201),flux(wavelength>5493 & wavelength<6201),'Color',[0 0 0],'LineWidth',3)
		hold all
		xlim([5815,5951])
		line([5889.950 5889.950],[-max(flux(wavelength>5493 & wavelength<6201)) max(flux(wavelength>5493 & wavelength<6201))],'Color',[0.3 0.3 0.3],'LineStyle','--','LineWidth',3)
		line([5895.924 5895.924],[-max(flux(wavelength>5493 & wavelength<6201)) max(flux(wavelength>5493 & wavelength<6201))],'Color',[0.3 0.3 0.3],'LineStyle','--','LineWidth',3)
		line([5889.950*offsetfactorforMW 5889.950*offsetfactorforMW],[-max(flux(wavelength>5493 & wavelength<6201)) max(flux(wavelength>5493 & wavelength<6201))],'Color',[0.9 0.3 0.1],'LineStyle',':','LineWidth',3)
		line([5895.924*offsetfactorforMW 5895.924*offsetfactorforMW],[-max(flux(wavelength>5493 & wavelength<6201)) max(flux(wavelength>5493 & wavelength<6201))],'Color',[0.9 0.3 0.1],'LineStyle',':','LineWidth',3)
		ylim([min(flux(wavelength>5493 & wavelength<6201)) max(flux(wavelength>5493 & wavelength<6201))])
		%show text to user telling them
		%Mark 8 locations, left and right LEFT continuum, left and right RIGHT continuum, left and right NaID first line, left and right NaID second line
		[wav_gin,flux_gin] = ginput(8);
		close(plottest)
	end

	NaIDfit = fit(wavelength(( (wavelength>=wav_gin(1)) & (wavelength<=wav_gin(2)) )|( (wavelength>=wav_gin(3)) & (wavelength<=wav_gin(4)) )),flux(( (wavelength>=wav_gin(1)) & (wavelength<=wav_gin(2)) )|( (wavelength>=wav_gin(3)) & (wavelength<=wav_gin(4)) )),'poly6','Robust','Bisquare');
	%NaIDfit = fit(wavelength,flux,'poly5','Robust','Bisquare','Exclude',(wavelength<5840)|(wavelength>5990)|(wavelength>5865&wavelength<5915));
	NaIDcontfitnormsub = (flux - NaIDfit(wavelength))./NaIDfit(wavelength);
	NaIDcontfitnormflux = flux./NaIDfit(wavelength);
	NaID1contfit = trapz(wavelength(wavelength>=wav_gin(7) & wavelength <=wav_gin(8)),NaIDcontfitnormsub(wavelength>=wav_gin(7) & wavelength <=wav_gin(8)))
	NaID2contfit = trapz(wavelength(wavelength>=wav_gin(5) & wavelength <= wav_gin(6)),NaIDcontfitnormsub(wavelength>=wav_gin(5) & wavelength <= wav_gin(6)))
	NaID1contfitnorm = trapz(wavelength(wavelength>=wav_gin(7) & wavelength <=wav_gin(8)),-1+NaIDcontfitnormflux(wavelength>=wav_gin(7) & wavelength <=wav_gin(8)))
	NaID2contfitnorm = trapz(wavelength(wavelength>=wav_gin(5) & wavelength <=wav_gin(6)),-1+NaIDcontfitnormflux(wavelength>=wav_gin(5) & wavelength <= wav_gin(6)))

	%noise estimates fitting nearby continuum errors and estimating contfits with maximimal and minimal estimates instead, statistical method

	Noise_NaID_left = std(NaIDcontfitnormflux(wavelength>wav_gin(1) & wavelength < wav_gin(2)))
	Noise_NaID_right = std(NaIDcontfitnormflux(wavelength>wav_gin(3) & wavelength < wav_gin(4)))
	%not 100% sure on the process here with datadif, resolution factoring in, but trying it for very low res data scaling up
	%datadif = mean(diff(wavelength));
	%if(strcmp(name,'J02331_NaID'))
	%	resolution = 4.1 * 1.9 * 4.14 * 0.81;
	%elseif(strcmp(name,'M04421_NaID'))
	%	resolution = 1.45;
	%else
	%	resolution =datadif;
	%
	%end
	
	Noise_NaID_unres = mean([Noise_NaID_left,Noise_NaID_right]);
	Noise_NaID = Noise_NaID_unres %* resolution / datadif
	NaID1_range = range(wavelength(wavelength>=wav_gin(7) & wavelength <=wav_gin(8)));
	NaID2_range = range(wavelength(wavelength>=wav_gin(5) & wavelength <=wav_gin(6)));

	[NaID1_err_avg NaID1_err_up NaID1_err_low] = error_EQW_contnorm(NaID1contfitnorm,Noise_NaID,NaID1_range)
	[NaID2_err_avg NaID2_err_up NaID2_err_low] = error_EQW_contnorm(NaID2contfitnorm,Noise_NaID,NaID2_range)

	%sodium doublet at 5889.950 and 5895.924
	plotNaID = figure(2);
	set(gcf,'color','w');
	set(plotNaID,'units','normalized','outerposition',[0 0 1 1]);
	set(plotNaID,'PaperUnits','normalized','PaperPosition',[0 0 3 1]);
	set(gcf,'renderer','painters')
	colormap jet
	clf
	plot(wavelength(wavelength>5493 & wavelength<6201),NaIDcontfitnormflux(wavelength>5493 & wavelength<6201),'Color',[0 0 0],'LineWidth',3)
	hold all

	wavelength( (wavelength>=wav_gin(5)) & (wavelength<=wav_gin(6)) );
	fliplr(wavelength( (wavelength>=wav_gin(5)) & (wavelength<=wav_gin(6)) ));
	NaIDcontfitnormflux( (wavelength>=wav_gin(5)) & (wavelength<=wav_gin(6)) );
	fliplr(NaIDcontfitnormflux( (wavelength>=wav_gin(5)) & (wavelength<=wav_gin(6)) ));

	%supress color filling for actual paper plot
	%xfill2 = [wavelength( (wavelength>=wav_gin(5)) & (wavelength<=wav_gin(6)) )', fliplr(wavelength( (wavelength>=wav_gin(5)) & (wavelength<=wav_gin(6)) ))'];
	%yfill2 = [NaIDcontfitnormflux( (wavelength>=wav_gin(5)) & (wavelength<=wav_gin(6)) )', fliplr(NaIDcontfitnormflux( (wavelength>=wav_gin(5)) & (wavelength<=wav_gin(6)) ))'];
	%fill(xfill2, yfill2,'r')
	%xfill1 = [wavelength( (wavelength>=wav_gin(7)) & (wavelength<=wav_gin(8)) )', fliplr(wavelength( (wavelength>=wav_gin(7)) & (wavelength<=wav_gin(8)) ))'];
	%yfill1 = [NaIDcontfitnormflux( (wavelength>=wav_gin(7)) & (wavelength<=wav_gin(8)) )', fliplr(NaIDcontfitnormflux( (wavelength>=wav_gin(7)) & (wavelength<=wav_gin(8)) ))'];
	%fill(xfill1, yfill1,'b')

	%remove _NaID for name printing sake
	nameprint = strrep(name,'_NaID','')

	line([0 10000],[1 1],'Color',[0.33 0.33 0.33],'LineStyle','--')
	line([5889.950 5889.950],[-1 2],'Color',[0.3 0.3 0.3],'LineStyle','--','LineWidth',3)
	line([5895.924 5895.924],[-1 2],'Color',[0.3 0.3 0.3],'LineStyle','--','LineWidth',3)
	line([5889.950*offsetfactorforMW 5889.950*offsetfactorforMW],[-1 1],'Color',[0.9 0.3 0.1],'LineStyle',':','LineWidth',3)
	line([5895.924*offsetfactorforMW 5895.924*offsetfactorforMW],[-1 1],'Color',[0.9 0.3 0.1],'LineStyle',':','LineWidth',3)
	htext = text(5900,1.13,nameprint,'interpreter','tex','FontName','CMU Serif Roman');
	set(htext, 'Color', 'black');
	set(htext, 'FontSize',40);
	htext = text(5850,1.13,'Na I D Absorption','interpreter','tex','FontName','CMU Serif Roman');
	set(htext, 'Color', 'black');
	set(htext, 'FontSize',40);
	htext = text(5900,1.09,['Day ',num2str(round(reldate)),' ',instrument],'interpreter','tex','FontName','CMU Serif Roman');
	set(htext, 'Color', 'black')
	set(htext, 'FontSize',40)
	xlim([5845,5931])
	ylim([0.6 1.15])
	set(gca,'box','on')
	set(gca,'FontSize',40)
	xlabel('Rest Wavelength ($\rm{\AA}$)','interpreter','latex','FontSize',44,'FontName','CMU Serif Roman')
	ylabel('Normalized Flux','interpreter','latex','FontSize',44,'FontName','CMU Serif Roman')

	accept_fit = input('Are fits acceptable? (1/0 for y/n) If no, it will run again asking for new graphical inputs.\n');
	if(accept_fit == 0)
		close(plotNaID)
	else
		if((~isempty(options.dataID))&&(run_parameters == 0))
			filename_parameters_measure_NaID = strcat(dataoutputdirectory,'parameters_measure_NaID.txt');
			printable_locations_space = [num2str(wav_gin')];
			%edits the previous variable to remove any instances of double spaces in it
			printable_locations_onespace = regexprep(printable_locations_space,' +',' ');
			parameters_measure_NaID = [options.dataID,' ',printable_locations_onespace];
			dlmwrite(filename_parameters_measure_NaID,parameters_measure_NaID,'-append','delimiter','');
		end
	end
end

figurename = strcat(figuredirectory,'NaIDfit_',name,'_',num2str(reldate),'.pdf');
export_fig(char(figurename))

close(plotNaID)

%https://arxiv.org/pdf/1206.6107.pdf source of poznanski values which are used


Rv = 3.1;
Ebv_Poz = 10^(1.17*(-NaID1contfit+-NaID2contfit)-1.85)
AV_calc = Ebv_Poz*Rv

%Eb-v and AV calculation based on just either sodium singular lines
Ebv_Poz_D1 = 10^(2.47*-NaID1contfit-1.76)
Ebv_Poz_D2 = 10^(2.16*-NaID2contfit-1.91)
AV_calc_pozD1 = Ebv_Poz_D1*Rv
AV_calc_pozD2 = Ebv_Poz_D2*Rv

AR_x = 10000/6580;
AR_y = AR_x - 1.82;
AR_a = 1 + 0.104*AR_y - 0.609*AR_y.^2 +0.701*AR_y.^3 + 1.137*AR_y.^4 - 1.718*AR_y.^5 - 0.827*AR_y.^6 + 1.647*AR_y.^7 - 0.505*AR_y.^8;
AR_b = 1.952*AR_y + 2.908*AR_y.^2 - 3.989*AR_y.^3 - 7.985*AR_y.^4 + 11.102*AR_y.^5 +5.491*AR_y.^6 - 10.805*AR_y.^7 + 3.347*AR_y.^8;
AR_calc = AV_calc .* (AR_a + AR_b./Rv)

AI_x = 10000/8060;
AI_y = AI_x - 1.82;
AI_a = 1 + 0.104*AI_y - 0.609*AI_y.^2 +0.701*AI_y.^3 + 1.137*AI_y.^4 - 1.718*AI_y.^5 - 0.827*AI_y.^6 + 1.647*AI_y.^7 - 0.505*AI_y.^8;
AI_b = 1.952*AI_y + 2.908*AI_y.^2 - 3.989*AI_y.^3 - 7.985*AI_y.^4 + 11.102*AI_y.^5 +5.491*AI_y.^6 - 10.805*AI_y.^7 + 3.347*AI_y.^8;
AI_calc = AV_calc .* (AI_a + AI_b./Rv)

AB_x = 10000/4450;
AB_y = AB_x - 1.82;
AB_a = 1 + 0.104*AB_y - 0.609*AB_y.^2 +0.701*AB_y.^3 + 1.137*AB_y.^4 - 1.718*AB_y.^5 - 0.827*AB_y.^6 + 1.647*AB_y.^7 - 0.505*AB_y.^8;
AB_b = 1.952*AB_y + 2.908*AB_y.^2 - 3.989*AB_y.^3 - 7.985*AB_y.^4 + 11.102*AB_y.^5 +5.491*AB_y.^6 - 10.805*AB_y.^7 + 3.347*AB_y.^8;
AB_calc = AV_calc .* (AB_a + AB_b./Rv)

Av_R1 = Rv*(0.025 + 0.454 * -NaID1contfit)
Av_R2 = Rv*(0.015 + 0.370 * -NaID2contfit)

Av_Tmodel1 = Rv*(-0.04 + 0.51 * -(NaID1contfit+NaID1contfit))
Av_Tmodel2 = Rv*(-0.01 + 0.16 * -(NaID1contfit+NaID1contfit))

AV_totalhostplusMW = A_V + AV_calc
Ebv_totalhostplusMW = AV_totalhostplusMW/Rv

ISPmax = 9 * Ebv_totalhostplusMW

AR_totalhostplusMW_calc = AV_totalhostplusMW .* (AR_a + AR_b./Rv)

%also add poznanski single line estimates and some code if we dont measure both? zzz



%%%%%old code

%line([wav_gin(1) wav_gin(1)],[min(flux(wavelength>5493 & wavelength<6201)) max(flux(wavelength>5493 & wavelength<6201))],'Color',[0.33 0.33 0.33],'LineStyle','--')
%line([wav_gin(3) wav_gin(3)],[min(flux(wavelength>5493 & wavelength<6201)) max(flux(wavelength>5493 & wavelength<6201))],'Color',[0.33 0.33 0.33],'LineStyle','--')

%line([0 10000],[1 1],'Color',[0.33 0.33 0.33],'LineStyle','--')
%line([5889.950 5889.950],[-1 2],'Color',[0.3 0.3 0.3],'LineStyle','--','LineWidth',3)
%line([5895.924 5895.924],[-1 2],'Color',[0.3 0.3 0.3],'LineStyle','--','LineWidth',3)

%good for error in continuum estimates where its normalized to 1

%NaID1contfit_maxest = NaID1contfitnorm/(1-Noise_NaID);
%NaID1contfit_minest = NaID1contfitnorm/(1+Noise_NaID);
%NaID2contfit_maxest = NaID2contfitnorm/(1-Noise_NaID);
%NaID2contfit_minest = NaID2contfitnorm/(1+Noise_NaID);
%NaID1upper = abs(NaID1contfit_maxest-NaID1contfitnorm);
%NaID1lower = abs(NaID1contfit_minest-NaID1contfitnorm);


%figure(1)
%plot(gaussfitD1,wavelength(wavelength>wav_gin(6) & wavelength < 5901),NaIDcontfitnormsub((wavelength>wav_gin(6) & wavelength < 5901)))
%hold all
%plot(wavelength(wavelength>wav_gin(6) & wavelength < 5901),smooth(NaIDcontfitnormsub((wavelength>wav_gin(6) & wavelength < 5901))))
%plot(wavelength(wavelength>wav_gin(6) & wavelength < 5901),NaIDcontfitnormsub((wavelength>wav_gin(6) & wavelength < 5901)))
%xlim([wav_gin(7),wav_gin(8)])
%ylim([-0.25 0])
%
%figure(2)
%plot(gaussfitD2,wavelength(wavelength>5885 & wavelength < wav_gin(6)),NaIDcontfitnormsub((wavelength>5885 & wavelength < wav_gin(6))))
%hold all
%plot(wavelength(wavelength>5885 & wavelength < wav_gin(6)),smooth(NaIDcontfitnormsub((wavelength>5885 & wavelength < wav_gin(6)))))
%plot(wavelength(wavelength>5885 & wavelength < wav_gin(6)),NaIDcontfitnormsub((wavelength>5885 & wavelength < wav_gin(6))))
%xlim([wav_gin(5),wav_gin(6)])
%ylim([-0.25 0])

%clf
%plot(wavelength,flux)
%hold all
%plot(NaIDfit,wavelength,flux)
%
%xlim([5400,6800])
%ylim([1.5*10^-16 15*10^-16])

%


%testfig = figure(2);
%clf
%plot(wavelength,flux)
%hold on
%plot(wavelength,NaIDfit(wavelength))
%%ylim([0.1*10^-15 1.2*10^-15])


%offsetfactorforMW




%just noise error estimates, not actually doing a full calculation
%stdNaIDcontfit = (wavelength(2)-wavelength(1))*std(NaIDcontfitnormsub(wavelength>5900 & wavelength< 5950))*sqrt(length(wavelength(wavelength>=wav_gin(7) & wavelength <=wav_gin(8))))
%stdNaIDcontfitnorm = (wavelength(2)-wavelength(1))*std(-1+NaIDcontfitnormflux(wavelength>5900 & wavelength< 5950))*sqrt(length(wavelength(wavelength>=wav_gin(7) & wavelength <=wav_gin(8))))

%fitting a gaussian noise errors, not preferred
%Noise = std(NaIDcontfitnormflux(wavelength>5910 & wavelength< 5950));
%Signal = mean(NaIDcontfitnormflux(wavelength>5910 & wavelength< 5950));
%SNR = Signal/Noise;
%gaussfitD1 = fit(wavelength(wavelength>=wav_gin(7) & wavelength <=wav_gin(8)),NaIDcontfitnormsub(wavelength>=wav_gin(7) & wavelength <=wav_gin(8)),'gauss1')
%sigmaD1 = sqrt((gaussfitD1.c1^2)/2);
%fwhmD1 = 2 * sqrt(2*log(2)) * sigmaD1
%gaussfitD2 = fit(wavelength(wavelength>=wav_gin(5) & wavelength < wav_gin(6)),NaIDcontfitnormsub(wavelength>=wav_gin(5) & wavelength < wav_gin(6)),'gauss1')
%sigmaD2 = sqrt((gaussfitD2.c1^2)/2);
%fwhmD2 = 2 * sqrt(2*log(2)) * sigmaD2
%p = mean(diff(wavelength));
%stdNaIDgauserrD1 = 1.5 * sqrt(fwhmD1 * p) / SNR
%stdNaIDgauserrD2 = 1.5 * sqrt(fwhmD2 * p) / SNR




%keyboard
%figure
%lambdaHalpha = 6562.81;
%normfactor = max(flux(wavelength>6500 & wavelength < 6700));
%plot(wavelength,flux/normfactor)
%line([lambdaHalpha lambdaHalpha],[-1 2],'Color',[0.3 0.3 0.3],'LineStyle','--','LineWidth',3)
%axis([[6500 6600] [0 1]])


%saveas(plotting, ['NaID.eps'], 'epsc');
%eval(['!epstopdf NaID.eps']);

	%h(1) = area(mmtbc1_20120301(mmtbc1_20120301>=mmtbc1_20120301(find(mmtbc1_20120301<5893,1,'last')) & mmtbc1_20120301<=mmtbc1_20120301(find(mmtbc1_20120301>5901,1,'first'))),mmtbc2_20120301_naIDcontfitnormsub(mmtbc1_20120301>=mmtbc1_20120301(find(mmtbc1_20120301<5893,1,'last')) & mmtbc1_20120301<=mmtbc1_20120301(find(mmtbc1_20120301>5901,1,'first'))));
	%h(2) = area(mmtbc1_20120301(mmtbc1_20120301>=mmtbc1_20120301(find(mmtbc1_20120301<5885,1,'last')) & mmtbc1_20120301<=mmtbc1_20120301(find(mmtbc1_20120301>5893,1,'first'))),mmtbc2_20120301_naIDcontfitnormsub(mmtbc1_20120301>=mmtbc1_20120301(find(mmtbc1_20120301<5885,1,'last')) & mmtbc1_20120301<=mmtbc1_20120301(find(mmtbc1_20120301>5893,1,'first'))));
	%h(1).FaceColor = [0.3 0.3 0.3];
	%h(2).FaceColor = [0.3 0.3 0.3];

%close(figure(1))
%close(figure(2))


